# Official Provider-Workflows Release Template
# Uses crossplane-contrib/provider-workflows with GHCR registry
# Compatible with rossigee GHCR setup

name: Release (Official Workflows)

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # Use official provider-workflows with custom registry configuration
  release:
    uses: crossplane-contrib/provider-workflows/.github/workflows/publish-provider.yml@main
    with:
      repository: ${{ github.event.repository.name }}
      version: ${{ github.event.inputs.version || github.ref_name }}
      go-version: '1.25.3'
      registry_org: 'rossigee'  # Publish to ghcr.io/rossigee
      mirror: false             # Disable mirroring to xpkg.upbound.io
      cleanup-disk: true
    secrets:
      GHCR_PAT: ${{ secrets.PAT_TOKEN }}

  # Add GitHub release creation (preserves your custom feature)
  github-release:
    needs: release
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.event.inputs.version || github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true

  # Add publication verification (preserves your custom verification)
  verify-publication:
    needs: release
    runs-on: ubuntu-24.04
    steps:
      - name: Verify Publication
        run: |
          set -e  # Fail fast on any error

          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          PROVIDER_NAME="${{ github.event.repository.name }}"
          REGISTRY_PATH="ghcr.io/rossigee/${PROVIDER_NAME}"

          echo "Verifying publication to ${REGISTRY_PATH}:${VERSION}"

          # Verify version tag exists and is pullable
          if docker pull "${REGISTRY_PATH}:${VERSION}" > /dev/null 2>&1; then
            echo "✅ Verified container image ${VERSION}"
          else
            echo "❌ Failed to pull container image ${VERSION}"
            exit 1
          fi

          # Verify latest tag exists and is pullable (latest may not be updated for patch releases)
          if docker pull "${REGISTRY_PATH}:latest" > /dev/null 2>&1; then
            echo "✅ Verified container image latest exists"
          else
            echo "⚠️  Container image latest not found (expected for patch releases)"
          fi

          echo "✅ Publication verification complete"